using LunaDisc.Classes.Codes;
using LunaDisc.Classes.FileMan;
using LunaDisc.Data;
using LunaDisc.UI;
using LunaDisc.UI.Info;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

namespace LunaDisc
{
    public partial class MainWindow : Form
    {
        // Definitions
        DiscImage image;
        Configuration conf;

        // New Functions
        private void localeUpdate()
        {
            Text = Locale.appTitle;                             // App Title
            fileContextMenu.Text = Locale.fileCtxMenu;          // File Context Menu
            tsbOpenImage.Text = Locale.openImage;               // Open Image Button

            tsbBackDirectory.Text = Locale.upDirectory;         // Go Up Directory Button
            lVolumeId.Text = Locale.volumeId;                   // Volume ID: Label
            lVolumeInfo.Text = Locale.volumeInfo;               // Volume Info Editor Header
        }

        private void listFiles(string path)
        {
            Log.Print(LogType.INFO, "Start loading of directory listing \"" + path + "\"");
            image.path = path;
            tstActiveDirectory.Text = path;
            panProgress.Visible = true;
            pbProgress.Maximum = 4;
            pbProgress.Value = 0;
            lProgress.Text = Locale.clearBrowser;
            lvBrowser.Clear();
            pbProgress.Value = 1;
            lProgress.Text = Locale.getDirectories;
            List<string> directories = image.getDirectoriesInPath().strings;
            pbProgress.Value = 2;
            lProgress.Text = Locale.getFiles;
            List<string> files = image.getFilesInPath().strings;

            Text = Locale.appTitle + " - " + image.actualPath.Split("\\").Last() + " (" + image.path + ")";
            pbProgress.Value = 3;
            lProgress.Text = Locale.updateList;
            foreach (string dir in directories)
            {
                int i = lvBrowser.Items.Add(dir).Index;
                lvBrowser.Items[i].Group = lvBrowser.Groups[(int)Data.BrowserIndexes.Folder];
                lvBrowser.Items[i].ImageIndex = (int)Data.BrowserIndexes.Folder;
            }

            foreach (string file in files)
            {
                int i = lvBrowser.Items.Add(file).Index;
                lvBrowser.Items[i].Group = lvBrowser.Groups[(int)Data.BrowserIndexes.File];
                lvBrowser.Items[i].ImageIndex = (int)Data.BrowserIndexes.File;
            }

            foreach (var info in image.dataToWrite)
            {
                if (info.fileLocation.StartsWith(path) == true)
                {
                    if (info.fileLocation.EndsWith(path) == false)
                    {
                        int i;
                        switch (info.isDirectory)
                        {
                            case true:
                                i = lvBrowser.Items.Add(info.fileLocation.Split("\\").Last()).Index;
                                lvBrowser.Items[i].Group = lvBrowser.Groups[(int)Data.BrowserIndexes.Folder];
                                lvBrowser.Items[i].ImageIndex = (int)Data.BrowserIndexes.Folder;
                                lvBrowser.Items[i].ForeColor = Color.Red;
                                break;
                            case false:
                                i = lvBrowser.Items.Add(info.fileLocation.Split("\\").Last()).Index;
                                lvBrowser.Items[i].Group = lvBrowser.Groups[(int)Data.BrowserIndexes.File];
                                lvBrowser.Items[i].ImageIndex = (int)Data.BrowserIndexes.File;
                                lvBrowser.Items[i].ForeColor = Color.Red;
                                break;
                        }
                    }
                }
            }
            Log.Print(LogType.INFO, "Finished loading directory listing");
            panProgress.Visible = false;
        }

        // Runtime - Autogenerated Event Functions
        public MainWindow()
        {
            InitializeComponent();
            if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\LunaDisc") == false)
            {
                Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\LunaDisc");

            }
            Log.Print(LogType.INFO, "LunaDisc Session Start");
            conf = new Configuration();
            if (conf.config.debug == true)
            {
                Log.Print(LogType.WARNING, "Debug Mode is enabled. There may be unfinished features, or testing features exposed to you. Please bear this in mind when making bug reports");
            }
            debugTools.Visible = conf.config.debug;
        }

        private void tsbOpenImage_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            ofd.Multiselect = false;
            ofd.Filter = "CD-ROM Disc Image|*.iso|" +
                "All Files|*.*";
            DialogResult dr = ofd.ShowDialog();

            if (dr == DialogResult.OK)
            {
                image = new DiscImage(ofd.FileName, Classes.Codes.Types.TYPE_CD_DISC);
                conf.config.lastPath = "";
                List<string> strings = ofd.FileName.Split("\\").ToList<string>();
                foreach (string s in strings)
                {
                    if (s != strings.Last())
                    {
                        conf.config.lastPath += s + "\\";
                    }
                }
                tstActiveDirectory.Text = "\\";
                listFiles("\\");
                panVolId.Visible = true;
                txtVolumeId.Text = image.volumeName();
            }
        }

        private void lvBrowser_Resize(object sender, EventArgs e)
        {
            tstActiveDirectory.Width = toolStrip.Width - tsbBackDirectory.Width - 20;
        }

        private void tstActiveDirectory_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Return)
            {
                listFiles(tstActiveDirectory.Text);
            }
        }

        private void MainWindow_Load(object sender, EventArgs e)
        {
            lvBrowser.View = View.Tile;

            localeUpdate();

            tstActiveDirectory.Width = toolStrip.Width - tsbBackDirectory.Width - 20;
        }

        private void lvBrowser_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void lvBrowser_DoubleClick(object sender, EventArgs e)
        {
            if (lvBrowser.SelectedItems.Count != 0)
            {
                if (lvBrowser.SelectedItems[0].Group == lvBrowser.Groups[0])
                {
                    if (tstActiveDirectory.Text == "\\")
                    {
                        tstActiveDirectory.Text = "";
                    }
                    tstActiveDirectory.Text = tstActiveDirectory.Text + "\\" + lvBrowser.SelectedItems[0].Text;
                    listFiles(tstActiveDirectory.Text);
                }
            }
        }

        private void tsbBackDirectory_Click(object sender, EventArgs e)
        {
            if (tstActiveDirectory.Text != "\\")
            {
                var length = tstActiveDirectory.Text.Split('\\').Last().Length + 1;
                tstActiveDirectory.Text = tstActiveDirectory.Text.Remove(tstActiveDirectory.Text.Length - length, length);
            }

            if (tstActiveDirectory.Text == "")
            {
                tstActiveDirectory.Text = "\\";
            }
            listFiles(tstActiveDirectory.Text);
        }

        private void lvBrowser_Click(object sender, MouseEventArgs e)
        {
            switch (e.Button)
            {
                case MouseButtons.Right:
                    if (lvBrowser.SelectedItems.Count > 0)
                    {
                        if (lvBrowser.SelectedItems[0].Group == lvBrowser.Groups[1])
                        {
                            extractFileToolStripMenuItem.Visible = true;
                            deleteToolStripMenuItem.Visible = true;
                            fcSep.Visible = false;
                        }
                        else
                        {
                            extractFileToolStripMenuItem.Visible = false;
                            deleteToolStripMenuItem.Visible = true;
                            fcSep.Visible = false;
                        }
                    }
                    else
                    {
                        extractFileToolStripMenuItem.Visible = false;
                        deleteToolStripMenuItem.Visible = false;
                        fcSep.Visible = false;
                    }
                    fileContextMenu.Show(MousePosition);
                    break;
            }

        }

        private void extractFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog sfd = new SaveFileDialog();
            sfd.FileName = lvBrowser.SelectedItems[0].Text;
            DialogResult dr = sfd.ShowDialog();

            if (dr == DialogResult.OK)
            {
                image.extractFile(image.path + "\\" + lvBrowser.SelectedItems[0].Text, sfd.FileName);
            }
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new About().ShowDialog();
        }

        private void fileMenu_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void saveImageToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (image.actualPath == null)
            {
                saveAs();
            }
            else if (image.actualPath == DiscImage.tempPath)
            {
                saveAs();
            }
            else
            {

                image.buildImage(txtVolumeId.Text);
                listFiles(image.path);
            }
        }

        public void saveAs()
        {
            SaveFileDialog sfd = new SaveFileDialog();
            switch (image.fType)
            {
                case Types.TYPE_CD_DISC:
                    sfd.Filter = "CD-ROM Disc Image|*.iso|" +
                        "All Files|*.*";
                    break;
            }
            DialogResult dr = sfd.ShowDialog();
            if (dr == DialogResult.OK)
            {
                List<string> strings = sfd.FileName.Split("\\").ToList<string>();
                foreach (string s in strings)
                {
                    if (s != strings.Last())
                    {
                        conf.config.lastPath += s + "\\";
                    }
                }
                if (File.Exists(sfd.FileName))
                {
                    File.Delete(sfd.FileName);
                }
                image.actualPath = sfd.FileName;
                image.buildImage(txtVolumeId.Text);
            }
            listFiles(image.path);
        }

        private void createADiskImageToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void cDROMImageisoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            panVolId.Visible = true;
            txtVolumeId.Text = conf.config.defaultImageName;
            image = new DiscImage(Types.TYPE_CD_DISC, txtVolumeId.Text);

            listFiles("\\");
        }

        private void saveImageAsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            saveAs();
        }

        private void addToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void fileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog ofd = new OpenFileDialog();
            DialogResult dr = ofd.ShowDialog();
            if (dr == DialogResult.OK)
            {
                image.addFile(ofd.FileName, image.path + "\\" + ofd.FileName.Split("\\").Last());
                listFiles(image.path);
            }
        }

        private void directoryToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RenameDialog rd = new RenameDialog();
            rd.rename = false;
            DialogResult r = rd.ShowDialog();
            if (r == DialogResult.OK)
            {
                image.addDirectory(rd.name);
                listFiles(image.path);
            }
        }

        private void MainWindow_FormClosing(object sender, FormClosingEventArgs e)
        {
            DiscImage.cleanUp();
            conf.saveConfig();
            Log.CloseLog();
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void renameToolStripMenuItem_Click(object sender, EventArgs e)
        {
            RenameDialog r = new RenameDialog();
            r.name = lvBrowser.SelectedItems[0].Text;
            r.ShowDialog();
            if (r.DialogResult == DialogResult.OK)
            {
                image.renameOrMoveFile(lvBrowser.SelectedItems[0].Text, r.name);
                lvBrowser.SelectedItems[0].Text = r.name;
                lvBrowser.SelectedItems[0].ForeColor = Color.Blue;
            }
        }

        private void preferencesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PreferencesDialog p = new PreferencesDialog(conf);
            DialogResult dr = p.ShowDialog();
            if (dr == DialogResult.OK)
            {
                conf.loadConfig();
                debugTools.Visible = conf.config.debug;
            }
        }

        private void memoryMonitorToolStripMenuItem_MouseHover(object sender, EventArgs e)
        {
            currentAppMemoryToolStripMenuItem.Text = "Working Memory: " + Environment.WorkingSet.ToString() + " bytes";
            // FileInfo fi = new FileInfo(image.actualPath);
            // imageSizeToolStripMenuItem.Text = "Image Filesize: " + fi.Length + " bytes";
        }

        private void fatalErrorToolStripMenuItem_Click(object sender, EventArgs e)
        {
            throw new NotImplementedException("Test Exception");
        }
    }
}
